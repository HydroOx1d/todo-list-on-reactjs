{"version":3,"file":"static/js/889.db7b4f5e.chunk.js","mappings":"oMAAO,IAAMA,EAAkB,WAC7B,IAAIC,EAAQ,IAAIC,OAAO,+BACvB,OAAO,SAACC,GACN,OAAOF,EAAMG,KAAKD,QAASE,EAAY,kBAI9BC,EAAW,SAACH,GAAD,OAAWA,OAAQE,EAAY,kBAE1CE,EAAW,SAACC,GACvB,OAAO,SAACL,GACN,YAAcE,IAAVF,GAGgB,GAAhBA,EAAMM,QAECN,EAAMM,OAASD,EAJjB,aAAeA,OAOtB,K,kLCiCN,EA9Cc,SAACE,GACb,OACE,iBAAKC,UAAW,QAAhB,WACE,iBAAKA,UAAU,qBAAf,WACE,gBAAKA,UAAU,mBAAf,UACE,gBAAKC,IAAKC,EAAMC,IAAI,eAEtB,yCAEF,SAAC,KAAD,CAAMC,SAAU,SAACC,GAAD,OAAaN,EAAMO,YAAYD,IAA/C,SACG,gBAAGE,EAAH,EAAGA,aAAH,OACC,kBAAMH,SAAUG,EAAcP,UAAU,mBAAxC,WACE,SAAC,KAAD,CAAOQ,KAAK,QAAQC,UAAUpB,EAAAA,EAAAA,MAA9B,SACG,gBAAGqB,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,OACC,iBAAKX,UAAU,0BAAf,WACE,0BAAOY,KAAK,OAAOC,YAAY,SAAYH,IAC1CC,EAAKG,OAASH,EAAKI,UAAW,0BAAOJ,EAAKG,eAIjD,SAAC,KAAD,CAAON,KAAK,WAAWC,UAAUb,EAAAA,EAAAA,IAAS,GAA1C,SACG,gBAAGc,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,OACC,iBAAKX,UAAU,0BAAf,WACE,0BAAOY,KAAK,WAAWC,YAAY,YAAeH,IACjDC,EAAKG,OAASH,EAAKI,UAAW,0BAAOJ,EAAKG,eAI/Cf,EAAMiB,cACN,gBAAKhB,UAAU,qBAAf,UACE,0BAAOD,EAAMkB,gBAGjB,mBAAQjB,UAAU,uBAAlB,0BAIN,eAAIA,UAAU,kBACd,iBAAKA,UAAU,2BAAf,WACE,4DADF,KAC+C,KAC7C,SAAC,KAAD,CAASkB,GAAG,YAAZ,mC,UCIR,GAAeC,EAAAA,EAAAA,KARS,SAACC,GACvB,MAAO,CACLC,OAAQD,EAAME,KAAKD,OACnBL,YAAaI,EAAME,KAAKN,YACxBC,WAAYG,EAAME,KAAKL,cAIa,CAAEM,YAAAA,EAAAA,GAAaC,cAAAA,EAAAA,IAAvD,EA1CuB,SAACzB,GAOtB,IANA0B,EAAAA,EAAAA,YAAU,WACR,OAAO,WACL1B,EAAMyB,eAAc,EAAM,OAE3B,IAECzB,EAAMsB,OACR,OAAO,SAAC,KAAD,CAAUH,GAAG,MAuBtB,OAAO,SAAC,GAAD,kBAAWnB,GAAX,IAAkBO,YApBL,SAACD,GACnB,IAAQqB,EAAoBrB,EAApBqB,MAAOC,EAAatB,EAAbsB,UACfC,EAAAA,EAAAA,IAA2BN,EAAAA,EAAMI,EAAOC,GACrCE,MAAK,SAACC,GACL,IAAMC,EAAOD,EAAeC,KACpBC,EAAeD,EAAfC,IAAKN,EAAUK,EAAVL,MACb3B,EAAMwB,YAAYS,EAAKN,GACvB3B,EAAMyB,eAAc,EAAM,OAE3BS,OAAM,SAACC,GACc,2CAAhBA,EAAIC,QACNpC,EAAMyB,eAAc,EAAO,mBAEP,2CAAhBU,EAAIC,SACNpC,EAAMyB,eAAc,EAAO,0C","sources":["components/common/validate/validate.js","components/login/Login.jsx","components/login/LoginContainer.jsx"],"sourcesContent":["export const emailValidation = () => {\n  let regex = new RegExp(\"[a-z0-9]+@[a-z]+.[a-z]{2,3}\");\n  return (value) => {\n    return regex.test(value) ? undefined : \"Invalid Email\";\n  };\n};\n\nexport const required = (value) => value ? undefined : \"Required Field\"\n\nexport const minValue = (min) => {\n  return (value) => {\n    if (value === undefined) {\n      return \"Min value \" + min;\n    }\n    if (value.length == 0) {\n      return `Min value ` + min;\n    } else if (value.length < min) {\n      return `Min value ` + min;\n    } else {\n      return undefined;\n    }\n  };\n};\n","import { Form, Field } from \"react-final-form\";\nimport './Login.css'\nimport Logo from \"../../assets/text-editor.png\";\nimport {emailValidation, minValue} from '../common/validate/validate'\nimport { NavLink } from \"react-router-dom\";\n\nconst Login = (props) => {\n  return (\n    <div className={\"login\"}>\n      <div className=\"title login__title\">\n        <div className=\"logo login__logo\">\n          <img src={Logo} alt=\"notepad\" />\n        </div>\n        <h2>Todo App</h2>\n      </div>\n      <Form onSubmit={(formObj) => props.loginSubmit(formObj)}>\n        {({ handleSubmit }) => (\n          <form onSubmit={handleSubmit} className=\"form login__form\">\n            <Field name=\"email\" validate={emailValidation()}>\n              {({ input, meta }) => (\n                <div className=\"input login__form-input\">\n                  <input type=\"text\" placeholder=\"Email\" {...input} />\n                  {meta.error && meta.touched && <span>{meta.error}</span>}\n                </div>\n              )}\n            </Field>\n            <Field name=\"password\" validate={minValue(6)}>\n              {({ input, meta }) => (\n                <div className=\"input login__form-input\">\n                  <input type=\"password\" placeholder=\"Password\" {...input} />\n                  {meta.error && meta.touched && <span>{meta.error}</span>}\n                </div>\n              )}\n            </Field>\n            {!props.authSuccess && (\n              <div className=\"error login__error\">\n                <span>{props.errMessage}</span>\n              </div>\n            )}\n            <button className=\"button login__button\">Login</button>\n          </form>\n        )}\n      </Form>\n      <hr className=\"hr login__hr\" />\n      <div className=\"question login__question\">\n        <span>Do you don't have an account?</span> -{\" \"}\n        <NavLink to=\"/register\">Create account</NavLink>\n      </div>\n    </div>\n  );\n};\n\nexport default Login\n","import { connect } from \"react-redux\";\nimport { getAuthData, handleAuthErr } from \"../../redux/authReducer.\";\nimport { Navigate } from \"react-router-dom\";\nimport { auth } from \"../../firebaseConfig\";\nimport { signInWithEmailAndPassword } from \"firebase/auth\";\nimport Login from \"./Login\";\nimport { useEffect } from \"react\";\n\nconst LoginContainer = (props) => {\n  useEffect(() => {\n    return () => {\n      props.handleAuthErr(true, \"\");\n    };\n  }, []);\n\n  if (props.isAuth) {\n    return <Navigate to=\"/\" />;\n  }\n\n  const loginSubmit = (formObj) => {\n    const { email, password } = formObj;\n    signInWithEmailAndPassword(auth, email, password)\n      .then((userCredential) => {\n        const user = userCredential.user;\n        const { uid, email } = user;\n        props.getAuthData(uid, email);\n        props.handleAuthErr(true, \"\");\n      })\n      .catch((err) => {\n        if (err.message === \"Firebase: Error (auth/user-not-found).\") {\n          props.handleAuthErr(false, \"Incorrect email\");\n        } else {\n          if (err.message === \"Firebase: Error (auth/wrong-password).\") {\n            props.handleAuthErr(false, \"Incorrect email or password\");\n          }\n        }\n      });\n  };\n\n  return <Login {...props} loginSubmit={loginSubmit} />;\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    isAuth: state.auth.isAuth,\n    authSuccess: state.auth.authSuccess,\n    errMessage: state.auth.errMessage,\n  };\n};\n\nexport default connect(mapStateToProps, { getAuthData, handleAuthErr })(\n  LoginContainer\n);\n"],"names":["emailValidation","regex","RegExp","value","test","undefined","required","minValue","min","length","props","className","src","Logo","alt","onSubmit","formObj","loginSubmit","handleSubmit","name","validate","input","meta","type","placeholder","error","touched","authSuccess","errMessage","to","connect","state","isAuth","auth","getAuthData","handleAuthErr","useEffect","email","password","signInWithEmailAndPassword","then","userCredential","user","uid","catch","err","message"],"sourceRoot":""}